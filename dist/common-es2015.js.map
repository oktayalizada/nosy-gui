{"version":3,"sources":["webpack:///./src/app/views/components/email/email-http.service.ts","webpack:///./src/app/views/input-system/input-system.ts","webpack:///./src/app/views/input-system/nosy-http.service.ts"],"names":[],"mappings":"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","file":"common-es2015.js","sourcesContent":["import {Injectable} from '@angular/core';\nimport {HttpClient} from '@angular/common/http';\nimport {Observable} from 'rxjs/Observable';\nimport {EmailTemplate} from './email-template';\nimport {environment} from '../../../../environments/environment.prod';\nimport {GlobalService} from '../../../auth/global.service';\n\n@Injectable()\nexport class EmailHttpService {\n\n  private baseUrl = environment.backendUrl + '/input-systems/';\n\n  constructor(private http: HttpClient, private globalService: GlobalService) {}\n\n  getEmailTemplates(inputSystemId): Observable<[EmailTemplate]> {\n    return this.http.get<[EmailTemplate]>(this.baseUrl  + inputSystemId + '/email-templates', this.globalService.getAuthHeader());\n  }\n\n  getAllAvailableProviders(): Observable<[string]> {\n    return this.http.get<[string]>(this.baseUrl  + 'email-providers', this.globalService.getAuthHeader())\n  }\n\n  postNewTemplate(newEmailTemplate, inputSystemId) {\n    console.log(newEmailTemplate)\n    return this.http.post(this.baseUrl + inputSystemId + '/email-templates', newEmailTemplate, this.globalService.getAuthHeader())\n  }\n\n  deleteEmailTemplate(emailTemplateId, inputSystemName) {\n    return this.http.delete(this.baseUrl + inputSystemName + '/email-templates/' + emailTemplateId, this.globalService.getAuthHeader());\n  }\n\n  updateEmailTemplate(updateTemplate, inputSystemName, emailTemplateId) {\n    return this.http.put(this.baseUrl + inputSystemName + '/email-templates/' + emailTemplateId, updateTemplate, this.globalService.getAuthHeader());\n  }\n\n  postEmail(templateId, inputSystemId, postProperties) {\n    return this.http.post(this.baseUrl + inputSystemId + '/email-templates/' + templateId + '/post', postProperties, this.globalService.getAuthHeader());\n  }\n\n}\n","export class InputSystem {\n  id: string;\n  name: String;\n  emailTemplate: any;\n\n  constructor(inputSystemName: string) {\n    this.name = inputSystemName;\n  }\n}\n","import {Injectable} from '@angular/core';\nimport {HttpClient} from '@angular/common/http';\nimport {InputSystem} from './input-system';\nimport {Observable} from 'rxjs/Observable';\nimport {GlobalService} from '../../auth/global.service';\nimport {environment} from '../../../environments/environment.prod';\n\n@Injectable()\nexport class NosyHttpService {\n\n  private baseUrl = environment.backendUrl;\n\n  constructor(private http: HttpClient, private globalService: GlobalService ) {}\n\n  getInputSystems(): Observable<[InputSystem]> {\n    // const headers: HttpHeaders = new HttpHeaders({\n    //    'Authorization' : this.keycloakService.getToken().toString()\n    //\n    //     });\n    return this.http.get<[InputSystem]>(this.baseUrl + '/input-systems', this.globalService.getAuthHeader());\n  }\n\n  postInputSystemName(inputSystemName: string) {\n    const inputSystem = new InputSystem(inputSystemName);\n    // noinspection JSAnnotator\n    delete inputSystem.id;\n    return this.http.post(this.baseUrl + '/input-systems', inputSystem, this.globalService.getAuthHeader());\n  }\n\n  deleteExistingInputSystem(inputSystem: string) {\n    return this.http.delete(this.baseUrl + '/input-systems/' + inputSystem, this.globalService.getAuthHeader());\n  }\n\n  updateExistingInputSystem(inputSystem: InputSystem) {\n    const urlAdder = inputSystem.id;\n    return this.http.put(this.baseUrl + '/input-systems/' + urlAdder, inputSystem, this.globalService.getAuthHeader());\n  }\n\n}\n"],"sourceRoot":""}